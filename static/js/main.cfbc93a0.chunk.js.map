{"version":3,"sources":["layouts/index.jsx","configs/routes.jsx","serviceWorker.js","index.js"],"names":["Layout","children","useLocation","pathname","search","useState","setIsAuth","logoutHandler","localStorage","removeItem","window","location","reload","useEffect","token","getItem","expiryDate","Date","remainingMilliseconds","getTime","setTimeout","to","routes","name","path","Component","lazy","exact","props","Routes","autoDismiss","map","key","render","fallback","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cfbc93a0.chunk.js","sourcesContent":["import React,{useEffect,useState} from 'react';\r\nimport { useLocation,Redirect} from 'react-router-dom';\r\n\r\nconst Layout=({children})=>{\r\n    const { pathname, search } = useLocation();\r\n    const [isAuth,setIsAuth]=useState(false);\r\n    const logoutHandler = () => {\r\n        setIsAuth(false)\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('expiryDate');\r\n        localStorage.removeItem('userId');\r\n        localStorage.removeItem('page');\r\n        localStorage.removeItem('userName');\r\n        localStorage.removeItem('isAuth');\r\n        window.location.reload(false)\r\n      };\r\n \r\n    // Auto logout when section finish : 60 minutes\r\n    useEffect(()=>{\r\n        const setAutoLogout = milliseconds => {\r\n            setTimeout(() => {\r\n                logoutHandler();\r\n            }, milliseconds);\r\n          };\r\n        const token = localStorage.getItem('token');\r\n        const expiryDate = localStorage.getItem('expiryDate');\r\n        if (!token || !expiryDate) {\r\n          return;\r\n        }\r\n        if (new Date(expiryDate) <= new Date()) {\r\n            logoutHandler();\r\n          return;\r\n        }\r\n        const remainingMilliseconds =new Date(expiryDate).getTime() - new Date().getTime();\r\n            setIsAuth(true);\r\n            setAutoLogout(remainingMilliseconds);\r\n    },[pathname, search]);\r\n    // Layout Elements\r\n    const BootstrappedLayout= () =>{\r\n      if(pathname==='/Ecommerce'){\r\n        return <Redirect to=\"/\" />\r\n      }\r\n        return <>{children}</>;\r\n    } \r\n    return <>{BootstrappedLayout()}</>;\r\n}\r\n\r\nexport default Layout","import React, { lazy, Suspense } from 'react';\r\nimport { HashRouter as Router, Redirect, Route, Switch } from 'react-router-dom';\r\nimport { ToastProvider } from 'react-toast-notifications';\r\n\r\nimport Layout from '../layouts';\r\n\r\nconst routes = [\r\n    {\r\n        name: 'Home',\r\n        path: '/',\r\n        Component: lazy(()=>import('../pages/Home')),\r\n        exact:true,\r\n        props:{}\r\n    },\r\n    //Error\r\n    {\r\n        name:'Error Page',\r\n        path:'/404',\r\n        Component:lazy(()=>import('../pages/System404')),\r\n        exact:true,\r\n        props:{}\r\n    },\r\n    //Auth\r\n    {\r\n        name:'Login',\r\n        path:'/login',\r\n        Component:lazy(()=>import('../pages/Auth/Login')),\r\n        exact:true,\r\n        props:{}\r\n    },\r\n    {\r\n        name:'Sign Up',\r\n        path:'/signup',\r\n        Component:lazy(()=>import('../pages/Auth/Signup')),\r\n        exact:true,\r\n        props:{}\r\n    },\r\n    {\r\n        name:'Set New Password',\r\n        path:'/reset-password/:token',\r\n        Component:lazy(()=>import('../pages/Auth/ForgetPassword/NewPassword')),\r\n        exact:true,\r\n        props:{}\r\n    },\r\n    {\r\n        name:'Reset Password',\r\n        path:'/reset-password',\r\n        Component:lazy(()=>import('../pages/Auth/ForgetPassword/ResetPassword')),\r\n        exact:true,\r\n        props:{}\r\n    },  \r\n    {\r\n        name:'Log out',\r\n        path:'/logout',\r\n        Component:lazy(()=>import('../pages/Auth/Logout')),\r\n        exact:true,\r\n        props:{}\r\n    },\r\n    //Product\r\n    {\r\n        name:'Cart',\r\n        path:'/cart',\r\n        Component:lazy(()=>import('../pages/Checkout/ShoppingCart')),\r\n        exact:true,\r\n        props:{}\r\n    },\r\n    {\r\n        name:'Shipping',\r\n        path:'/shipping',\r\n        Component:lazy(()=>import('../pages/Checkout/Shipping')),\r\n        exact:true,\r\n        props:{}\r\n    },\r\n    {\r\n        name:'Payment',\r\n        path:'/payment',\r\n        Component:lazy(()=>import('../pages/Checkout/Payment')),\r\n        exact:true,\r\n        props:{}\r\n    },\r\n    {\r\n        name:'Complete Order',\r\n        path:'/complete-order',\r\n        Component:lazy(()=>import('../pages/Checkout')),\r\n        exact:true,\r\n        props:{}\r\n    },\r\n    {\r\n        name:'Shop',\r\n        path:'/shop',\r\n        Component:lazy(()=>import('../pages/Shop')),\r\n        exact:true,\r\n        props:{}\r\n    },\r\n    {\r\n        name:'Detail Product',\r\n        path:'/:productId',\r\n        Component:lazy(()=>import('../pages/DetailProduct')),\r\n        exact:true,\r\n        props:{}\r\n    }, \r\n   \r\n  \r\n];\r\n\r\nconst Routes=()=>{\r\n    return (\r\n        <Router>\r\n        <ToastProvider autoDismiss={true}>\r\n        <Layout>\r\n                <Switch>\r\n              {routes.map(({ path, Component, exact }) => (\r\n                <Route\r\n                  path={path}\r\n                  key={path}\r\n                  exact={exact}\r\n                  render={() => (\r\n                    <Suspense fallback={null}>\r\n                     <Component /> \r\n                    </Suspense>\r\n                  )}\r\n                />\r\n              ))}\r\n              <Redirect to=\"/\" />\r\n            </Switch> \r\n         </Layout>    \r\n         </ToastProvider>\r\n           </Router>        \r\n    )\r\n}\r\n\r\nexport default Routes;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport Routes from './configs/routes';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(  <Routes />   , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}